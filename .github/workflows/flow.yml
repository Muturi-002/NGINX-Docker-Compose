name: Blue-Green Deployment Workflow

on:
    workflow_dispatch:

env:
    PRIVATE_KEY: ${{ secrets.DEPLOYMENT_PRIVATE_KEY }}
    SSH_USER: ${{ secrets.SSH_USER }}
    SSH_IP: ${{ secrets.SSH_IP }}
    

jobs:
    setup-deployment:
        name: Check Project Directory
        runs-on: ubuntu-24.04

        steps:
            - name: Setup SSH Key
              run: |
                mkdir -p ~/.ssh
                echo "$PRIVATE_KEY" > ~/.ssh/deployment.key
                chmod 600 ~/.ssh/deployment.key
            - name: Verify Project Directory Exists
              run: | 
                ssh -i ~/.ssh/deployment.key -o StrictHostKeyChecking=no $SSH_USER@$SSH_IP '
                    if [ -d "/home/ubuntu/NGINX-Docker-Compose" ]; then
                        echo "Project directory exists."
                    else
                        echo "Project directory does not exist. Exiting."
                        exit 1
                    fi
                '
            - name: Update Project files
              run: |
                ssh -i ~/.ssh/deployment.key -o StrictHostKeyChecking=no $SSH_USER@$SSH_IP '
                    cd /home/ubuntu/NGINX-Docker-Compose
                    ls -la
                    if [ -d ".git" ]; then
                        echo "GIT found"
                        git pull origin main
                    fi
                '
    docker-check:
        name: Docker and Docker Compose
        runs-on: ubuntu-24.04
        steps:
            - name: Check Docker and Docker Compose
              run: |
                mkdir -p ~/.ssh
                echo "$PRIVATE_KEY" > ~/.ssh/deployment.key
                chmod 600 ~/.ssh/deployment.key
                ssh -i ~/.ssh/deployment.key -o StrictHostKeyChecking=no $SSH_USER@$SSH_IP '
                    if command -v docker >/dev/null 2>&1 && command -v docker compose >/dev/null 2>&1; then
                        echo "Docker and Docker-Compose already installed"
                        echo "Docker Version:$(docker --version)"
                        echo "Docker-Compose Version:$(docker compose version)"
                    else 
                        echo "Installing latest versions of Docker and Docker-Compose..."
                        sudo apt install curl ca-certificates -y 
                        sudo mkdir -p /etc/apt/keyrings
                        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc 
                        sudo chmod a+r /etc/apt/keyrings/docker.asc
                        
                        echo \
                        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
                        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

                        sudo apt-get update
                        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
                        echo Docker and Docker-Compose installed successfully
                        echo Docker Version: $(docker --version)
                        echo Docker-Compose Version: $(docker compose version)

                        sudo systemctl enable docker
                        sudo systemctl start docker
                    fi
                '